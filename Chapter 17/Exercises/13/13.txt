The following function is supposed to insert a new node into its proper place in an ordered
list, returning a pointer to the first node in the modified list. Unfortunately, the function
doesn't work correctly in all cases. Explain what's wrong with it and show how to fix it.
Assume that the node structure is the one defined in Section 17.5.

struct node *insert_into_ordered_list(struct node *list, struct node *new_node)
{
    struct node *cur = list, *prev = NULL;
    while (*cur->value <= new_node->value) {
        prev = cur;
        cur = cur->next;
    }
    prev->next = new_node;
    new_node->next = cur;
    return list;
}

The first issue is that if the insertion is to happen before the current first node of the list, it won't work.
cur = list
prev = NULL
prev->next // error prev is NULL

The second issue is that it doesn't work if the list is empty.

To fix both issues we can use a pointer to a pointer to the list and check if the list is NULL.

struct node *insert_into_ordered_list(struct node *list, struct node *new_node)
{
    struct node **pp = &list

    while (list != NULL)
    {
        if (list->value >= new_node->value)
        {
            break;
        }

        pp = &list->next;
        list = list->next;
    }

    *pp = new_node;
    new_node->next = list;

    return list;
}