The <ctype.h> header usually defines most of its functions as macros as well. These
macros rely on a static array that's declared in <ctype.h> but defined in a separate file. A
portion of a typical <ctype.h> header appears below. Use this sample to answer the fol-
lowing questions.

(a) Why do the names of the "bit" macros (such as _UPPER) and the _ctype array begin
with an underscore?

(b) Explain what the _ctype array will contain. Assuming that the character set is ASCII,
show the values of the array elements at positions 9 (the horizontal tab character), 32 (the
space character), 65 (the letter A) and 94 (the ^ character). See Section 23.5 for a descrip-
tion of what each macro should return.

(c) What's the advantage of using an array to implement these macros?

#define _UPPER   0x01   /* upper-case letter */
#define _LOWER   0x02   /* lower-case letter */
#define _DIGIT   0x04   /* decimal digit */
#define _CONTROL 0x08   /* control character */
#define _PUNCT   0x10   /* punctuation character */
#define _SPACE   0x20   /* white-space character */
#define _HEX     0x40   /* hexadecimal digit */
#define _BLANK   0x80   /* space character */

#define isalnum(c)  (_ctype[c] & (_UPPER|_LOWER|_DIGIT))
#define isalpha(c)  (_ctype[c] & (_UPPER|_LOWER))
#define iscntrl(c)  (_ctype[c] & _CONTROL)
#define isdigit(c)  (_ctype[c] & _DIGIT)
#define isgraph(c)  (_ctype[c] &
                      (_PUNCT|_UPPER|_LOWER|_DIGIT))
#define islower(c)  (_ctype[c] & _LOWER)
#define isprint(c)  (_ctype[c] &
                      (_BLANK|_PUNCT|_UPPER|_LOWER|_DIGIT))
#define ispunct(c)  (_ctype[c] & _PUNCT)
#define isspace(c)  (_ctype[c] & _SPACE)
#define isupper(c)  (_ctype[c] & _UPPER)
#define isxdigit(c) (_ctype[c] & (_DIGIT|_HEX))

(a) The C standard states that any file that includes a standard header must
    not reuse the names of macros contained within it. This ties in with the
    rule that states that any macro name starting with an
    underscore followed by a capital letter is reserved for use within
    the standard library.
    These restrictions gives programmers the ability to define common words as
    macro names in their own header files (such as DIGIT, or CONTROL) as macros
    within standard headers will likely be given names preceded by an underscore
    starting with a capital letter (such as _DIGIT, or _CONTROL in ctype.h)

(b) Explain what the _ctype array will contain. Assuming that the character
    set is ASCII, show the values of the array elements at positions 9 (the
    horizontal tab character), 32 (the space character), 65 (the letter A), and
    94 (the ^ character).

    The _ctype static array is used as a lookup table arranged by bitfields.
    Each bit corresponds to a particular property of the character being looked
    up (E.g if its a digit, alphanumeric, etc...). In the case of the examples
    provided by the textbook bit 0 would represent if the char were uppercase,
    bit 1 if it were lowercase, bit 2 if it's a digit, and so on...

    _ctype array contains:

    Position 9  (Horizontal tab char)
    This character is considered a whitespace character so it will have bit 5 set:
    00100000

    Position 32 (Space char)
    This character is considered a whitespace character so it will have bit 5 set:
    00100000

    Position 65 (Letter A):
    This character is considered an uppercase character, so it will have bit 0 set:
    00000001

(c) By using an array, lookup times will be fast, no calculations will need to be performed, and macro parameters wlil only need to be evaluated once.