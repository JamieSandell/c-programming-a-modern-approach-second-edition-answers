Suppose that s is the following structure:

struct {
    double a;
    union {
        char b[4];
        double c;
        int d;
    } e;
    char f[4];
} s;

If char values occupy one byte, int values occupy four bytes, and double values occupy
eight bytes, how much space will a C compiler allocate for s? (Assume that the compiler
leaves no "holes" between members.)

It will allocate 20 bytes. 8 for a, 8 for e (union needs space of the biggest type as the rest will fit inside it), 4 for f.